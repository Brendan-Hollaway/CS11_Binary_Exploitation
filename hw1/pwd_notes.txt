rbp - 0x20 : 0CFA2CBB8E783F484h
rbp - 0x18 : 0CB94FA8FE9B6D3BFh
rbp - 0x10 : 0F590E683F1AEDCB3h
rbp - 0x8  : 0E391F487h

total pwd: E391F487F590E683F1AEDCB3CB94FA8FE9B6D3BFCFA2CBB8E783F484
pwd2: CFA2CBB8E783F484CB94FA8FE9B6D3BFF590E683F1AEDCB3E391F487

rax = rbp - 0x20 ; literally
esi = 0x1C
rdi = rbp - 0x20 ; literally 

# SUB_4005BD ===========================================================================
[rbp-0x18] = rbp - 0x20 ; literally 
[rbp+var_1C] = 0x1C
[rbp-1]  = 0xFF
[rbp-8]  = 0

while([rbp-8] < [rbp-0x1C]) {
	edx = [rbp-8] // dword
	rax =  [rbp-0x18]
	rax += rdx // qword

	eax = one byte of [rax]
	[rbp-9] = al // last bit of rax

	edx = [rbp-8] // dword
	rax =  [rbp-0x18]
	rdx += rax // qword
	
	ecx = [rbp-8] // dword
	//unnecessary //rax =  [rbp-0x18]
	rax += rcx // qword

	eax = one byte of [rax]
	
	al = al ^ [rbp-1]
	[rdx] = al
	
	eax = one byte of [rbp-9]

	[rbp-1] = al
	[rbp-8] += 1
}

Encoding: 
	i = [rbp-8]
	0x1C = [rbp-0x1C]
	current = [rbp-9]
	encoded_string = [rbp-0x18]

int i = 0;
char* encoded_string = [rbp - 0x20];
char current;
char next_xor = 0xff;

while( i++ < 0x1C ) {
	current = encoded_string[i];
	encoded_string[i] = encoded_string[i] ^ [rbp-1];
	next_xor = current;
}

# end SUB_4005BD ===========================================================================

print "Enter the password"
